(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// interpolate between minimum ratio & maximum ratio, based on current viewport width
var TypeRatioInterpolation = require("./modules/type-ratio-interpolation");

TypeRatioInterpolation.init();

},{"./modules/type-ratio-interpolation":2}],2:[function(require,module,exports){
"use strict";

// interpolate between minimum ratio and maximum ratio,
// based on current viewport width
function scaleRatio(width, minValue, maxValue) {
  var minRange = 680;
  var maxRange = 1280;
  var a = (maxValue - minValue) / (maxRange - minRange);
  var b = minValue - a * minRange;
  var ratio = width * a + b;
  var adjustedRatio = Math.max(minValue, Math.min(ratio, maxValue)); // update CSS custom property '--ratio' with ratio figure from the above math

  document.documentElement.style.setProperty("--ratio", adjustedRatio);
}

module.exports = {
  // interpolate between type ratio minimum and maximum values
  // store the result in a CSS custom property
  init: function init() {
    // add smallest type ratio from variables.styl here
    var typeRatioSmall = 1.125; // add largest type ratio from variables.styl here

    var typeRatioLarge = 1.24; // get current viewport width

    var screenWidth = screen.width; // apply the ratio scaling function

    scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge); // watch for change in the viewport width and recalculate if change is detected

    window.addEventListener("resize", function () {
      var screenWidth = screen.width;
      scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge);
    });
  }
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvYXBwLmpzIiwiYXNzZXRzL2pzL21vZHVsZXMvdHlwZS1yYXRpby1pbnRlcnBvbGF0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTtBQUNBLElBQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLG9DQUFELENBQXRDOztBQUNBLHNCQUFzQixDQUFDLElBQXZCOzs7OztBQ0ZBO0FBQ0E7QUFDQSxTQUFTLFVBQVQsQ0FBcUIsS0FBckIsRUFBNEIsUUFBNUIsRUFBc0MsUUFBdEMsRUFBZ0Q7QUFDNUMsTUFBTSxRQUFRLEdBQVEsR0FBdEI7QUFDQSxNQUFNLFFBQVEsR0FBUSxJQUF0QjtBQUNBLE1BQU0sQ0FBQyxHQUFlLENBQUMsUUFBUSxHQUFHLFFBQVosS0FBeUIsUUFBUSxHQUFHLFFBQXBDLENBQXRCO0FBQ0EsTUFBTSxDQUFDLEdBQWUsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFyQztBQUNBLE1BQU0sS0FBSyxHQUFXLEtBQUssR0FBRyxDQUFSLEdBQVksQ0FBbEM7QUFDQSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBTCxDQUFTLFFBQVQsRUFBbUIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFULEVBQWdCLFFBQWhCLENBQW5CLENBQXRCLENBTjRDLENBTzVDOztBQUNBLEVBQUEsUUFBUSxDQUFDLGVBQVQsQ0FBeUIsS0FBekIsQ0FBK0IsV0FBL0IsQ0FBMkMsU0FBM0MsRUFBc0QsYUFBdEQ7QUFDSDs7QUFFRCxNQUFNLENBQUMsT0FBUCxHQUFpQjtBQUNiO0FBQ0E7QUFDQSxFQUFBLElBQUksRUFBRSxnQkFBTTtBQUNSO0FBQ0EsUUFBSSxjQUFjLEdBQUcsS0FBckIsQ0FGUSxDQUdSOztBQUNBLFFBQUksY0FBYyxHQUFHLElBQXJCLENBSlEsQ0FLUjs7QUFDQSxRQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBekIsQ0FOUSxDQU9SOztBQUNBLElBQUEsVUFBVSxDQUFDLFdBQUQsRUFBYyxjQUFkLEVBQThCLGNBQTlCLENBQVYsQ0FSUSxDQVNSOztBQUNBLElBQUEsTUFBTSxDQUFDLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQU07QUFDcEMsVUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQXpCO0FBQ0EsTUFBQSxVQUFVLENBQUMsV0FBRCxFQUFjLGNBQWQsRUFBOEIsY0FBOUIsQ0FBVjtBQUNILEtBSEQ7QUFJSDtBQWpCWSxDQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIGludGVycG9sYXRlIGJldHdlZW4gbWluaW11bSByYXRpbyAmIG1heGltdW0gcmF0aW8sIGJhc2VkIG9uIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbmNvbnN0IFR5cGVSYXRpb0ludGVycG9sYXRpb24gPSByZXF1aXJlKFwiLi9tb2R1bGVzL3R5cGUtcmF0aW8taW50ZXJwb2xhdGlvblwiKTtcblR5cGVSYXRpb0ludGVycG9sYXRpb24uaW5pdCgpO1xuIiwiLy8gaW50ZXJwb2xhdGUgYmV0d2VlbiBtaW5pbXVtIHJhdGlvIGFuZCBtYXhpbXVtIHJhdGlvLFxuLy8gYmFzZWQgb24gY3VycmVudCB2aWV3cG9ydCB3aWR0aFxuZnVuY3Rpb24gc2NhbGVSYXRpbyAod2lkdGgsIG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIGNvbnN0IG1pblJhbmdlICAgICAgPSA2ODA7XG4gICAgY29uc3QgbWF4UmFuZ2UgICAgICA9IDEyODA7XG4gICAgY29uc3QgYSAgICAgICAgICAgICA9IChtYXhWYWx1ZSAtIG1pblZhbHVlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICBjb25zdCBiICAgICAgICAgICAgID0gbWluVmFsdWUgLSBhICogbWluUmFuZ2U7XG4gICAgY29uc3QgcmF0aW8gICAgICAgICA9IHdpZHRoICogYSArIGI7XG4gICAgY29uc3QgYWRqdXN0ZWRSYXRpbyA9IE1hdGgubWF4KG1pblZhbHVlLCBNYXRoLm1pbihyYXRpbywgbWF4VmFsdWUpKTtcbiAgICAvLyB1cGRhdGUgQ1NTIGN1c3RvbSBwcm9wZXJ0eSAnLS1yYXRpbycgd2l0aCByYXRpbyBmaWd1cmUgZnJvbSB0aGUgYWJvdmUgbWF0aFxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcmF0aW9cIiwgYWRqdXN0ZWRSYXRpbyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIGludGVycG9sYXRlIGJldHdlZW4gdHlwZSByYXRpbyBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlc1xuICAgIC8vIHN0b3JlIHRoZSByZXN1bHQgaW4gYSBDU1MgY3VzdG9tIHByb3BlcnR5XG4gICAgaW5pdDogKCkgPT4ge1xuICAgICAgICAvLyBhZGQgc21hbGxlc3QgdHlwZSByYXRpbyBmcm9tIHZhcmlhYmxlcy5zdHlsIGhlcmVcbiAgICAgICAgbGV0IHR5cGVSYXRpb1NtYWxsID0gMS4xMjU7XG4gICAgICAgIC8vIGFkZCBsYXJnZXN0IHR5cGUgcmF0aW8gZnJvbSB2YXJpYWJsZXMuc3R5bCBoZXJlXG4gICAgICAgIGxldCB0eXBlUmF0aW9MYXJnZSA9IDEuMjQ7XG4gICAgICAgIC8vIGdldCBjdXJyZW50IHZpZXdwb3J0IHdpZHRoXG4gICAgICAgIGxldCBzY3JlZW5XaWR0aCA9IHNjcmVlbi53aWR0aDtcbiAgICAgICAgLy8gYXBwbHkgdGhlIHJhdGlvIHNjYWxpbmcgZnVuY3Rpb25cbiAgICAgICAgc2NhbGVSYXRpbyhzY3JlZW5XaWR0aCwgdHlwZVJhdGlvU21hbGwsIHR5cGVSYXRpb0xhcmdlKTtcbiAgICAgICAgLy8gd2F0Y2ggZm9yIGNoYW5nZSBpbiB0aGUgdmlld3BvcnQgd2lkdGggYW5kIHJlY2FsY3VsYXRlIGlmIGNoYW5nZSBpcyBkZXRlY3RlZFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2NyZWVuV2lkdGggPSBzY3JlZW4ud2lkdGg7XG4gICAgICAgICAgICBzY2FsZVJhdGlvKHNjcmVlbldpZHRoLCB0eXBlUmF0aW9TbWFsbCwgdHlwZVJhdGlvTGFyZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuIl19
