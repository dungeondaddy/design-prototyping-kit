(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict"; // interpolate between minimum ratio & maximum ratio, based on current viewport width

var TypeRatioInterpolation = require("./modules/type-ratio-interpolation");

TypeRatioInterpolation.init(); // polyfill to enable us to use forEach on node lists in IE11

var ForEachPolyfill = require("./modules/foreach-polyfill");

ForEachPolyfill.init();

},{"./modules/foreach-polyfill":2,"./modules/type-ratio-interpolation":3}],2:[function(require,module,exports){
"use strict";

module.exports = {
  // polyfill to enable us to use forEach on node lists in IE11
  init: function init() {
    if ("NodeList" in window && !NodeList.prototype.forEach) {
      NodeList.prototype.forEach = function (callback, thisArg) {
        thisArg = thisArg || window;

        for (var i = 0; i < this.length; i++) {
          callback.call(thisArg, this[i], i, this);
        }
      };
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

// interpolate between minimum ratio and maximum ratio,
// based on current viewport width
function scaleRatio(width, minValue, maxValue) {
  var minRange = 680;
  var maxRange = 1280;
  var a = (maxValue - minValue) / (maxRange - minRange);
  var b = minValue - a * minRange;
  var ratio = width * a + b;
  var adjustedRatio = Math.max(minValue, Math.min(ratio, maxValue)); // update CSS custom property '--ratio' with ratio figure from the above math

  document.documentElement.style.setProperty("--ratio", adjustedRatio);
}

module.exports = {
  // interpolate between type ratio minimum and maximum values
  // store the result in a CSS custom property
  init: function init() {
    // add smallest type ratio from variables.styl here
    var typeRatioSmall = 1.125; // add largest type ratio from variables.styl here

    var typeRatioLarge = 1.24; // get current viewport width

    var screenWidth = screen.width; // apply the ratio scaling function

    scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge); // watch for change in the viewport width and recalculate if change is detected

    window.addEventListener("resize", function () {
      var screenWidth = screen.width;
      scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge);
    });
  }
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvYXBwLmpzIiwiYXNzZXRzL2pzL21vZHVsZXMvZm9yZWFjaC1wb2x5ZmlsbC5qcyIsImFzc2V0cy9qcy9tb2R1bGVzL3R5cGUtcmF0aW8taW50ZXJwb2xhdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLGEsQ0FFQTs7QUFDQSxJQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxvQ0FBRCxDQUF0Qzs7QUFDQSxzQkFBc0IsQ0FBQyxJQUF2QixHLENBRUE7O0FBQ0EsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLDRCQUFELENBQS9COztBQUNBLGVBQWUsQ0FBQyxJQUFoQjs7Ozs7QUNSQSxNQUFNLENBQUMsT0FBUCxHQUFpQjtBQUNiO0FBQ0EsRUFBQSxJQUFJLEVBQUUsZ0JBQU07QUFDUixRQUFJLGNBQWMsTUFBZCxJQUF3QixDQUFDLFFBQVEsQ0FBQyxTQUFULENBQW1CLE9BQWhELEVBQXlEO0FBQ3JELE1BQUEsUUFBUSxDQUFDLFNBQVQsQ0FBbUIsT0FBbkIsR0FBNkIsVUFBVSxRQUFWLEVBQW9CLE9BQXBCLEVBQTZCO0FBQ3RELFFBQUEsT0FBTyxHQUFHLE9BQU8sSUFBSSxNQUFyQjs7QUFDQSxhQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLEtBQUssTUFBekIsRUFBaUMsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQyxVQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsT0FBZCxFQUF1QixLQUFLLENBQUwsQ0FBdkIsRUFBZ0MsQ0FBaEMsRUFBbUMsSUFBbkM7QUFDSDtBQUNKLE9BTEQ7QUFNSDtBQUNKO0FBWFksQ0FBakI7Ozs7O0FDQUE7QUFDQTtBQUNBLFNBQVMsVUFBVCxDQUFxQixLQUFyQixFQUE0QixRQUE1QixFQUFzQyxRQUF0QyxFQUFnRDtBQUM1QyxNQUFNLFFBQVEsR0FBUSxHQUF0QjtBQUNBLE1BQU0sUUFBUSxHQUFRLElBQXRCO0FBQ0EsTUFBTSxDQUFDLEdBQWUsQ0FBQyxRQUFRLEdBQUcsUUFBWixLQUF5QixRQUFRLEdBQUcsUUFBcEMsQ0FBdEI7QUFDQSxNQUFNLENBQUMsR0FBZSxRQUFRLEdBQUcsQ0FBQyxHQUFHLFFBQXJDO0FBQ0EsTUFBTSxLQUFLLEdBQVcsS0FBSyxHQUFHLENBQVIsR0FBWSxDQUFsQztBQUNBLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsUUFBVCxFQUFtQixJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsRUFBZ0IsUUFBaEIsQ0FBbkIsQ0FBdEIsQ0FONEMsQ0FPNUM7O0FBQ0EsRUFBQSxRQUFRLENBQUMsZUFBVCxDQUF5QixLQUF6QixDQUErQixXQUEvQixDQUEyQyxTQUEzQyxFQUFzRCxhQUF0RDtBQUNIOztBQUVELE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBQ2I7QUFDQTtBQUNBLEVBQUEsSUFBSSxFQUFFLGdCQUFNO0FBQ1I7QUFDQSxRQUFJLGNBQWMsR0FBRyxLQUFyQixDQUZRLENBR1I7O0FBQ0EsUUFBSSxjQUFjLEdBQUcsSUFBckIsQ0FKUSxDQUtSOztBQUNBLFFBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUF6QixDQU5RLENBT1I7O0FBQ0EsSUFBQSxVQUFVLENBQUMsV0FBRCxFQUFjLGNBQWQsRUFBOEIsY0FBOUIsQ0FBVixDQVJRLENBU1I7O0FBQ0EsSUFBQSxNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBTTtBQUNwQyxVQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBekI7QUFDQSxNQUFBLFVBQVUsQ0FBQyxXQUFELEVBQWMsY0FBZCxFQUE4QixjQUE5QixDQUFWO0FBQ0gsS0FIRDtBQUlIO0FBakJZLENBQWpCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGludGVycG9sYXRlIGJldHdlZW4gbWluaW11bSByYXRpbyAmIG1heGltdW0gcmF0aW8sIGJhc2VkIG9uIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbmNvbnN0IFR5cGVSYXRpb0ludGVycG9sYXRpb24gPSByZXF1aXJlKFwiLi9tb2R1bGVzL3R5cGUtcmF0aW8taW50ZXJwb2xhdGlvblwiKTtcblR5cGVSYXRpb0ludGVycG9sYXRpb24uaW5pdCgpO1xuXG4vLyBwb2x5ZmlsbCB0byBlbmFibGUgdXMgdG8gdXNlIGZvckVhY2ggb24gbm9kZSBsaXN0cyBpbiBJRTExXG5jb25zdCBGb3JFYWNoUG9seWZpbGwgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2ZvcmVhY2gtcG9seWZpbGxcIik7XG5Gb3JFYWNoUG9seWZpbGwuaW5pdCgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gcG9seWZpbGwgdG8gZW5hYmxlIHVzIHRvIHVzZSBmb3JFYWNoIG9uIG5vZGUgbGlzdHMgaW4gSUUxMVxuICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgaWYgKFwiTm9kZUxpc3RcIiBpbiB3aW5kb3cgJiYgIU5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gICAgICAgICAgICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgIHRoaXNBcmcgPSB0aGlzQXJnIHx8IHdpbmRvdztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsIi8vIGludGVycG9sYXRlIGJldHdlZW4gbWluaW11bSByYXRpbyBhbmQgbWF4aW11bSByYXRpbyxcbi8vIGJhc2VkIG9uIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbmZ1bmN0aW9uIHNjYWxlUmF0aW8gKHdpZHRoLCBtaW5WYWx1ZSwgbWF4VmFsdWUpIHtcbiAgICBjb25zdCBtaW5SYW5nZSAgICAgID0gNjgwO1xuICAgIGNvbnN0IG1heFJhbmdlICAgICAgPSAxMjgwO1xuICAgIGNvbnN0IGEgICAgICAgICAgICAgPSAobWF4VmFsdWUgLSBtaW5WYWx1ZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XG4gICAgY29uc3QgYiAgICAgICAgICAgICA9IG1pblZhbHVlIC0gYSAqIG1pblJhbmdlO1xuICAgIGNvbnN0IHJhdGlvICAgICAgICAgPSB3aWR0aCAqIGEgKyBiO1xuICAgIGNvbnN0IGFkanVzdGVkUmF0aW8gPSBNYXRoLm1heChtaW5WYWx1ZSwgTWF0aC5taW4ocmF0aW8sIG1heFZhbHVlKSk7XG4gICAgLy8gdXBkYXRlIENTUyBjdXN0b20gcHJvcGVydHkgJy0tcmF0aW8nIHdpdGggcmF0aW8gZmlndXJlIGZyb20gdGhlIGFib3ZlIG1hdGhcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLXJhdGlvXCIsIGFkanVzdGVkUmF0aW8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHR5cGUgcmF0aW8gbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXNcbiAgICAvLyBzdG9yZSB0aGUgcmVzdWx0IGluIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgLy8gYWRkIHNtYWxsZXN0IHR5cGUgcmF0aW8gZnJvbSB2YXJpYWJsZXMuc3R5bCBoZXJlXG4gICAgICAgIGxldCB0eXBlUmF0aW9TbWFsbCA9IDEuMTI1O1xuICAgICAgICAvLyBhZGQgbGFyZ2VzdCB0eXBlIHJhdGlvIGZyb20gdmFyaWFibGVzLnN0eWwgaGVyZVxuICAgICAgICBsZXQgdHlwZVJhdGlvTGFyZ2UgPSAxLjI0O1xuICAgICAgICAvLyBnZXQgY3VycmVudCB2aWV3cG9ydCB3aWR0aFxuICAgICAgICBsZXQgc2NyZWVuV2lkdGggPSBzY3JlZW4ud2lkdGg7XG4gICAgICAgIC8vIGFwcGx5IHRoZSByYXRpbyBzY2FsaW5nIGZ1bmN0aW9uXG4gICAgICAgIHNjYWxlUmF0aW8oc2NyZWVuV2lkdGgsIHR5cGVSYXRpb1NtYWxsLCB0eXBlUmF0aW9MYXJnZSk7XG4gICAgICAgIC8vIHdhdGNoIGZvciBjaGFuZ2UgaW4gdGhlIHZpZXdwb3J0IHdpZHRoIGFuZCByZWNhbGN1bGF0ZSBpZiBjaGFuZ2UgaXMgZGV0ZWN0ZWRcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNjcmVlbldpZHRoID0gc2NyZWVuLndpZHRoO1xuICAgICAgICAgICAgc2NhbGVSYXRpbyhzY3JlZW5XaWR0aCwgdHlwZVJhdGlvU21hbGwsIHR5cGVSYXRpb0xhcmdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbiJdfQ==
