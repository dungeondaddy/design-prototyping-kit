(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// interpolate between minimum ratio & maximum ratio, based on current viewport width
var TypeRatioInterpolation = require("./modules/type-ratio-interpolation");

TypeRatioInterpolation.init(); // polyfill to enable us to use forEach on node lists in IE11

var ForEachPolyfill = require("./modules/foreach-polyfill");

ForEachPolyfill.init();

},{"./modules/foreach-polyfill":2,"./modules/type-ratio-interpolation":3}],2:[function(require,module,exports){
"use strict";

module.exports = {
  // polyfill to enable us to use forEach on node lists in IE11
  init: function init() {
    if ("NodeList" in window && !NodeList.prototype.forEach) {
      NodeList.prototype.forEach = function (callback, thisArg) {
        thisArg = thisArg || window;

        for (var i = 0; i < this.length; i++) {
          callback.call(thisArg, this[i], i, this);
        }
      };
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

// interpolate between minimum ratio and maximum ratio,
// based on current viewport width
function scaleRatio(width, minValue, maxValue) {
  var minRange = 680;
  var maxRange = 1280;
  var a = (maxValue - minValue) / (maxRange - minRange);
  var b = minValue - a * minRange;
  var ratio = width * a + b;
  var adjustedRatio = Math.max(minValue, Math.min(ratio, maxValue)); // update CSS custom property '--ratio' with ratio figure from the above math

  document.documentElement.style.setProperty("--ratio", adjustedRatio);
}

module.exports = {
  // interpolate between type ratio minimum and maximum values
  // store the result in a CSS custom property
  init: function init() {
    // add smallest type ratio from variables.styl here
    var typeRatioSmall = 1.125; // add largest type ratio from variables.styl here

    var typeRatioLarge = 1.24; // get current viewport width

    var screenWidth = screen.width; // apply the ratio scaling function

    scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge); // watch for change in the viewport width and recalculate if change is detected

    window.addEventListener("resize", function () {
      var screenWidth = screen.width;
      scaleRatio(screenWidth, typeRatioSmall, typeRatioLarge);
    });
  }
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvYXBwLmpzIiwiYXNzZXRzL2pzL21vZHVsZXMvZm9yZWFjaC1wb2x5ZmlsbC5qcyIsImFzc2V0cy9qcy9tb2R1bGVzL3R5cGUtcmF0aW8taW50ZXJwb2xhdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUE7QUFDQSxJQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxvQ0FBRCxDQUF0Qzs7QUFDQSxzQkFBc0IsQ0FBQyxJQUF2QixHLENBRUE7O0FBQ0EsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLDRCQUFELENBQS9COztBQUNBLGVBQWUsQ0FBQyxJQUFoQjs7Ozs7QUNOQSxNQUFNLENBQUMsT0FBUCxHQUFpQjtBQUNiO0FBQ0EsRUFBQSxJQUFJLEVBQUUsZ0JBQU07QUFDUixRQUFJLGNBQWMsTUFBZCxJQUF3QixDQUFDLFFBQVEsQ0FBQyxTQUFULENBQW1CLE9BQWhELEVBQXlEO0FBQ3JELE1BQUEsUUFBUSxDQUFDLFNBQVQsQ0FBbUIsT0FBbkIsR0FBNkIsVUFBVSxRQUFWLEVBQW9CLE9BQXBCLEVBQTZCO0FBQ3RELFFBQUEsT0FBTyxHQUFHLE9BQU8sSUFBSSxNQUFyQjs7QUFDQSxhQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLEtBQUssTUFBekIsRUFBaUMsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQyxVQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsT0FBZCxFQUF1QixLQUFLLENBQUwsQ0FBdkIsRUFBZ0MsQ0FBaEMsRUFBbUMsSUFBbkM7QUFDSDtBQUNKLE9BTEQ7QUFNSDtBQUNKO0FBWFksQ0FBakI7Ozs7O0FDQUE7QUFDQTtBQUNBLFNBQVMsVUFBVCxDQUFxQixLQUFyQixFQUE0QixRQUE1QixFQUFzQyxRQUF0QyxFQUFnRDtBQUM1QyxNQUFNLFFBQVEsR0FBUSxHQUF0QjtBQUNBLE1BQU0sUUFBUSxHQUFRLElBQXRCO0FBQ0EsTUFBTSxDQUFDLEdBQWUsQ0FBQyxRQUFRLEdBQUcsUUFBWixLQUF5QixRQUFRLEdBQUcsUUFBcEMsQ0FBdEI7QUFDQSxNQUFNLENBQUMsR0FBZSxRQUFRLEdBQUcsQ0FBQyxHQUFHLFFBQXJDO0FBQ0EsTUFBTSxLQUFLLEdBQVcsS0FBSyxHQUFHLENBQVIsR0FBWSxDQUFsQztBQUNBLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsUUFBVCxFQUFtQixJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsRUFBZ0IsUUFBaEIsQ0FBbkIsQ0FBdEIsQ0FONEMsQ0FPNUM7O0FBQ0EsRUFBQSxRQUFRLENBQUMsZUFBVCxDQUF5QixLQUF6QixDQUErQixXQUEvQixDQUEyQyxTQUEzQyxFQUFzRCxhQUF0RDtBQUNIOztBQUVELE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBQ2I7QUFDQTtBQUNBLEVBQUEsSUFBSSxFQUFFLGdCQUFNO0FBQ1I7QUFDQSxRQUFJLGNBQWMsR0FBRyxLQUFyQixDQUZRLENBR1I7O0FBQ0EsUUFBSSxjQUFjLEdBQUcsSUFBckIsQ0FKUSxDQUtSOztBQUNBLFFBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUF6QixDQU5RLENBT1I7O0FBQ0EsSUFBQSxVQUFVLENBQUMsV0FBRCxFQUFjLGNBQWQsRUFBOEIsY0FBOUIsQ0FBVixDQVJRLENBU1I7O0FBQ0EsSUFBQSxNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBTTtBQUNwQyxVQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBekI7QUFDQSxNQUFBLFVBQVUsQ0FBQyxXQUFELEVBQWMsY0FBZCxFQUE4QixjQUE5QixDQUFWO0FBQ0gsS0FIRDtBQUlIO0FBakJZLENBQWpCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy8gaW50ZXJwb2xhdGUgYmV0d2VlbiBtaW5pbXVtIHJhdGlvICYgbWF4aW11bSByYXRpbywgYmFzZWQgb24gY3VycmVudCB2aWV3cG9ydCB3aWR0aFxuY29uc3QgVHlwZVJhdGlvSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoXCIuL21vZHVsZXMvdHlwZS1yYXRpby1pbnRlcnBvbGF0aW9uXCIpO1xuVHlwZVJhdGlvSW50ZXJwb2xhdGlvbi5pbml0KCk7XG5cbi8vIHBvbHlmaWxsIHRvIGVuYWJsZSB1cyB0byB1c2UgZm9yRWFjaCBvbiBub2RlIGxpc3RzIGluIElFMTFcbmNvbnN0IEZvckVhY2hQb2x5ZmlsbCA9IHJlcXVpcmUoXCIuL21vZHVsZXMvZm9yZWFjaC1wb2x5ZmlsbFwiKTtcbkZvckVhY2hQb2x5ZmlsbC5pbml0KCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBwb2x5ZmlsbCB0byBlbmFibGUgdXMgdG8gdXNlIGZvckVhY2ggb24gbm9kZSBsaXN0cyBpbiBJRTExXG4gICAgaW5pdDogKCkgPT4ge1xuICAgICAgICBpZiAoXCJOb2RlTGlzdFwiIGluIHdpbmRvdyAmJiAhTm9kZUxpc3QucHJvdG90eXBlLmZvckVhY2gpIHtcbiAgICAgICAgICAgIE5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgdGhpc0FyZyA9IHRoaXNBcmcgfHwgd2luZG93O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXNbaV0sIGksIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiLy8gaW50ZXJwb2xhdGUgYmV0d2VlbiBtaW5pbXVtIHJhdGlvIGFuZCBtYXhpbXVtIHJhdGlvLFxuLy8gYmFzZWQgb24gY3VycmVudCB2aWV3cG9ydCB3aWR0aFxuZnVuY3Rpb24gc2NhbGVSYXRpbyAod2lkdGgsIG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIGNvbnN0IG1pblJhbmdlICAgICAgPSA2ODA7XG4gICAgY29uc3QgbWF4UmFuZ2UgICAgICA9IDEyODA7XG4gICAgY29uc3QgYSAgICAgICAgICAgICA9IChtYXhWYWx1ZSAtIG1pblZhbHVlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICBjb25zdCBiICAgICAgICAgICAgID0gbWluVmFsdWUgLSBhICogbWluUmFuZ2U7XG4gICAgY29uc3QgcmF0aW8gICAgICAgICA9IHdpZHRoICogYSArIGI7XG4gICAgY29uc3QgYWRqdXN0ZWRSYXRpbyA9IE1hdGgubWF4KG1pblZhbHVlLCBNYXRoLm1pbihyYXRpbywgbWF4VmFsdWUpKTtcbiAgICAvLyB1cGRhdGUgQ1NTIGN1c3RvbSBwcm9wZXJ0eSAnLS1yYXRpbycgd2l0aCByYXRpbyBmaWd1cmUgZnJvbSB0aGUgYWJvdmUgbWF0aFxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcmF0aW9cIiwgYWRqdXN0ZWRSYXRpbyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIGludGVycG9sYXRlIGJldHdlZW4gdHlwZSByYXRpbyBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlc1xuICAgIC8vIHN0b3JlIHRoZSByZXN1bHQgaW4gYSBDU1MgY3VzdG9tIHByb3BlcnR5XG4gICAgaW5pdDogKCkgPT4ge1xuICAgICAgICAvLyBhZGQgc21hbGxlc3QgdHlwZSByYXRpbyBmcm9tIHZhcmlhYmxlcy5zdHlsIGhlcmVcbiAgICAgICAgbGV0IHR5cGVSYXRpb1NtYWxsID0gMS4xMjU7XG4gICAgICAgIC8vIGFkZCBsYXJnZXN0IHR5cGUgcmF0aW8gZnJvbSB2YXJpYWJsZXMuc3R5bCBoZXJlXG4gICAgICAgIGxldCB0eXBlUmF0aW9MYXJnZSA9IDEuMjQ7XG4gICAgICAgIC8vIGdldCBjdXJyZW50IHZpZXdwb3J0IHdpZHRoXG4gICAgICAgIGxldCBzY3JlZW5XaWR0aCA9IHNjcmVlbi53aWR0aDtcbiAgICAgICAgLy8gYXBwbHkgdGhlIHJhdGlvIHNjYWxpbmcgZnVuY3Rpb25cbiAgICAgICAgc2NhbGVSYXRpbyhzY3JlZW5XaWR0aCwgdHlwZVJhdGlvU21hbGwsIHR5cGVSYXRpb0xhcmdlKTtcbiAgICAgICAgLy8gd2F0Y2ggZm9yIGNoYW5nZSBpbiB0aGUgdmlld3BvcnQgd2lkdGggYW5kIHJlY2FsY3VsYXRlIGlmIGNoYW5nZSBpcyBkZXRlY3RlZFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2NyZWVuV2lkdGggPSBzY3JlZW4ud2lkdGg7XG4gICAgICAgICAgICBzY2FsZVJhdGlvKHNjcmVlbldpZHRoLCB0eXBlUmF0aW9TbWFsbCwgdHlwZVJhdGlvTGFyZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuIl19
